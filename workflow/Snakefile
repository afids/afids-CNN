# ---- begin snakebids boilerplate ----------------------------------------------

from snakebids import bids, generate_inputs, get_wildcard_constraints


configfile: workflow.source_path("../config/snakebids.yml")


# Get input wildcards
inputs_raw = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)
inputs_afids = generate_inputs(
    bids_dir=config["afids_dir"],
    pybids_inputs=config["pybids_inputs_afids"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------


rule extract_afid:
    input:
        fcsv=inputs_afids["afids"].path,
    output:
        txt=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}.txt",
            **inputs_raw["T1w"].wildcards
        ),
    log:
        bids(
            root="logs",
            suffix="landmark.log",
            afid="{afid}",
            **inputs_raw["T1w"].wildcards
        ),
    script:
        './scripts/extract_afids.py"'


rule gen_sphere:
    input:
        t1w=inputs_raw["T1w"].path,
        txt=rules.extract_afid.output.txt,
    output:
        sphere=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}.nii.gz",
            **inputs_raw["T1w"].wildcards
        ),
    container: config["containers"]["c3d"]
    shell:
        "c3d {input.t1w} -scale 0 -landmarks-to-spheres {input.txt} 1 -o {output.sphere}"


rule gen_prob:
    input:
        t1w=inputs_raw["T1w"].path,
    output:
        prob=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}_prob.nii.gz",
            **inputs_raw["T1w"].wildcards
        ),
    container: config["containers"]["c3d"]
    shell:
        "c3d {input.t1w} -sdt -o {output.prob}"


rule gen_norm:
    input:
        prob=rules.gen_prob.output.prob,
    output:
        norm=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}_prob_norm_-{k}.nii.gz",
            **inputs_raw["T1w"].wildcards
        ),
    container: config["containers"]["c3d"]
    shell:
        "c3d {input.prob} -scale {k} -exp -o {output.norm}"


rule gen_mask:
    input:
        prob=rules.gen_prob.output.prob,
    output:
        bin=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="afid-{afid}_bin.nii.gz",
            **inputs_raw["T1w"].wildcards
        ),
    container: config["containers"]["c3d"]
    shell:
        "c3d {input.prob} -threshold 0 10 1 0 -o {output.bin}"


rule gen_patches:
    input:
        t1w=inputs_raw["T1w"].path,
        prob=rules.gen_prob.output.prob,
        mask=rules.gen_mask.output.bin,
    output:
        patch=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="patch_afid-{afid}_31_afids_all.dat",
            **inputs_raw["T1w"].wildcards
        ),
    params:
        num_augment=config["num_augment"],
        angle_stdev=config["angle_stdev"],
        radius_arg=config["radius_arg"],
        frequency=config["frequency"],
    container: config["containers"]["c3d"]
    shell:
        "c3d {input.t1w} {input.prob} {input.mask} "
        "-xpa {params.num_augment} {params.angle_stdev} "
        "-xp {output.patch} {params.radius_arg} {params.frequency}"


rule cat_patches:
    input:
        patch=inputs_raw["T1w"].expand(
            rules.gen_patches.output.patch, allow_missing=True
        ),
    output:
        combined_patch=bids(
            root=str(Path(config["output_dir"]) / "c3d"),
            suffix="all_patches_{afid}_train_all.dat",
        ),
    shell:
        "cat {input.patch} > {output.combined_patch}"


rule train_model:
    input:
        combined_patch=rules.cat_patches.output.combined_patch,
    output:
        model=bids(
            root=str(Path(config["output_dir"]) / "afids-cnn-train"),
            suffix="afid-{afid}_cnn.model",
        ),
        history=bids(
            root=str(Path(config["output_dir"]) / "afids-cnn-train"),
            suffix="afid-{afid}_loss.csv",
        ),
    params:
        num_channels=config["num_channels"],
        dims=config["dims"],
    resources:
        script=str(Path(workflow.basedir) / "scripts" / "train.py")
    shell:
        "python3 {resources.script} {params.num_channels} {params.dims} {input.combined_patch} "
        "{output.model} --loss_out_path {output.history}"


rule all:
    input:
        expand(
            rules.train_model.output.model,
            afid=[1],#range(32),
        ),
    default_target: True
